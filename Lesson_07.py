# 1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()),
# который должен принимать данные (список списков) для формирования матрицы.
# Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
# Примеры матриц вы найдете в методичке.
# Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода __add__()
# для реализации операции сложения двух объектов класса Matrix (двух матриц).
# Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц выполнять поэлементно —
# первый элемент первой строки первой матрицы складываем с первым элементом первой строки второй матрицы и т.д.

class Matrix:
    def __init__(self, list_1, list_2):
        self.matrix = [list_1, list_2]
        self.list_1 = list_1
        self.list_2 = list_2

    def __add__(self):
        matrix = [[0, 0, 0],
                  [0, 0, 0],
                  [0, 0, 0]]

        for i in range(len(self.list_1)):

            for j in range(len(self.list_2[i])):
                matrix[i][j] = self.list_1[i][j] + self.list_2[i][j]

        return str('\n'.join(['\t'.join([str(j) for j in i]) for i in matrix]))


user_matrix = Matrix([[12, 8, 71],
                      [9, 11, 34],
                      [40, 50, 93]],
                     [[42, 3, 1],
                      [16, 57, 32],
                      [4, 52, 91]])
print("Сумма матриц:")
print(user_matrix.__add__())


# 2. Реализовать проект расчета суммарного расхода ткани на производство одежды.
# Основная сущность (класс) этого проекта — одежда, которая может иметь определенное название.
# К типам одежды в этом проекте относятся пальто и костюм.
# У этих типов одежды существуют параметры: размер (для пальто) и рост (для костюма).
# Это могут быть обычные числа: V и H, соответственно.
# Для определения расхода ткани по каждому типу одежды использовать формулы:
# для пальто (V/6.5 + 0.5), для костюма (2 * H + 0.3). Проверить работу этих методов на реальных данных.
# Реализовать общий подсчет расхода ткани.
# Проверить на практике полученные на этом уроке знания: реализовать абстрактные классы для основных классов проекта,
# проверить на практике работу декоратора @property.


class Tailor:
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def get_square_coat(self):
        return self.width / 6.5 + 0.5

    def get_square_suit(self):
        return self.height * 2 + 0.3

    @property
    def get_full_square(self):
        return str(f'общая площадь: {(self.width / 6.5 + 0.5) + (self.height * 2 + 0.3)}')


class Coat(Tailor):
    def __init__(self, width, height):
        super().__init__(width, height)
        self.square_coat = self.width / 6.5 + 0.5

    def __str__(self):
        return f'Площадь (пальто) {self.square_coat}'


class Suit(Tailor):
    def __init__(self, width, height):
        super().__init__(width, height)
        self.square_suit = self.height * 2 + 0.3

    def __str__(self):
        return f'Площадь (костюм) {self.square_suit}'


coat = Coat(3, 6)
suit = Suit(1, 3)
print('')
print(coat)
print(suit)
# Тут используется посчет через @property, но возникает вопрос, почему в формулах для, например, пальто
# используется только один параметр (V). Получается, что пальто с любым H (хоть 10000000) будет той же площади,
# при любом V.
print(f'Пальто - {coat.get_full_square}')
print(f'Костюм - {suit.get_full_square}')


# 3. Реализовать программу работы с органическими клетками.
# Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток.
# При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.

# Вычитание. Участвуют две клетки.
# Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение.

# Умножение. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.

# Деление. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.

# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****...,
# где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.


class Cell:
    def __init__(self, quantity):
        self.quantity = int(quantity)

    def __str__(self):
        return f'{self.quantity * "*", self.quantity}'

    def __add__(self, second):
        return Cell(self.quantity + second.quantity)

    def __sub__(self, second):

        return Cell(int(self.quantity - second.quantity)) \
            if (self.quantity - second.quantity) > 0 else print('Операция невозможна.')

    def __mul__(self, second):
        return Cell(int(self.quantity * second.quantity))

    def __truediv__(self, second):
        return Cell(round(self.quantity // second.quantity))

    def make_order(self, cells_in_row):
        row = ''
        for i in range(int(self.quantity / cells_in_row)):
            row += f'{"*" * cells_in_row} \n'
        row += f'{"*" * (self.quantity % cells_in_row)}'
        return row


cell1 = Cell(10)
cell2 = Cell(51)
print('')
print(f'Ячеек в первой клетке: {cell1}')
print(f'Ячеек во второй клетке: {cell2}')
print(f'Результат сложения: {cell1 + cell2}')
print(f'Результат вычитания: {cell2 - cell1}')
print(f'По пять ячеек в ряд: \n{cell2.make_order(5)}')
print(f'По десять ячеек в ряд: \n{cell2.make_order(10)}')
print(f'Результат деления: {cell2 / cell1}')
